/*
 * Copyright 2016 Chandra X-Ray Observatory.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package cfa.vo.iris.visualizer.preferences;

import cfa.vo.iris.sed.ExtSed;
import java.awt.Component;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;

import org.apache.commons.lang.builder.ReflectionToStringBuilder;

/**
 * Window for accessing Visualizer Preferences. Including co-plotting
 * multiple SEDs and Binding the Visualizer to the Workspace.
 */
@SuppressWarnings("serial")
public class PlotManagementWindow extends javax.swing.JInternalFrame {

    private VisualizerComponentPreferences preferences;
    private List<ExtSed> availableSeds;
    private List<ExtSed> selectedSeds;
    
    /**
     * Creates new form PlotManagementWindow
     */
    public PlotManagementWindow(VisualizerComponentPreferences preferences) {
        this.preferences = preferences;
        initComponents();
        
        this.setAvailableSeds(preferences.getAvailableSeds());
        this.setSelectedSeds(preferences.getDataModel().getSelectedSeds());
    }
    
    /*
     * 
     * Getters and setters
     * 
     */
    
    public VisualizerComponentPreferences getPreferences() {
        return preferences;
    }
    
    public void setPreferences(VisualizerComponentPreferences preferences) {
        this.preferences = preferences;
    }
    
    protected List<ExtSed> getAvailableSeds() {
        return availableSeds;
    }

    public static final String PROP_AVAILABLE_SEDS = "availableSeds";
    protected void setAvailableSeds(List<ExtSed> arg1) {
        List<ExtSed> old = this.availableSeds;
        this.availableSeds = arg1;
        this.firePropertyChange(PROP_AVAILABLE_SEDS, old, arg1);
    }

    protected List<ExtSed> getSelectedSeds() {
        return selectedSeds;
    }

    public static final String PROP_SELECTED_SEDS = "selectedSeds";
    protected void setSelectedSeds(List<ExtSed> arg1) {
        List<ExtSed> old = this.selectedSeds;
        this.selectedSeds = arg1;
        this.firePropertyChange(PROP_SELECTED_SEDS, old, arg1);
    }

    
    static class ExtSedCellRenderer extends JLabel implements ListCellRenderer<ExtSed> {
        private static final long serialVersionUID = 1L;
        
        @Override
        public Component getListCellRendererComponent(
                JList<? extends ExtSed> list, ExtSed entry, int index, 
                boolean isSelected, boolean cellHasFocus) 
        {
            if (entry != null) {
                setText(entry.getId());
            }
            
            setOpaque(true);
            
            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }
            
            return this;
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        selectButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        sedScrollPane = new javax.swing.JScrollPane();
        sedList = new javax.swing.JList();
        jCheckBox1 = new javax.swing.JCheckBox();
        cancelButton = new javax.swing.JButton();

        setClosable(true);
        setTitle("Select Seds");
        setToolTipText("");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        selectButton.setText("Plot Seds");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(selectButton, gridBagConstraints);

        sedScrollPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        sedList.setCellRenderer(new ExtSedCellRenderer());

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${availableSeds}");
        org.jdesktop.swingbinding.JListBinding jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, sedList);
        bindingGroup.addBinding(jListBinding);
        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${selectedSeds}"), sedList, org.jdesktop.beansbinding.BeanProperty.create("selectedElement"));
        bindingGroup.addBinding(binding);

        sedScrollPane.setViewportView(sedList);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(sedScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(sedScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        getContentPane().add(jPanel1, gridBagConstraints);

        jCheckBox1.setText("Enable Co-Plotting");
        jCheckBox1.setToolTipText("If selected, users can manually specify which SEDs to display in the plotter. The plotter will not update when the selected sed in the builder changes.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${preferences.boundToWorkspace}"), jCheckBox1, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        getContentPane().add(jCheckBox1, gridBagConstraints);

        cancelButton.setText("Cancel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(cancelButton, gridBagConstraints);

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JList sedList;
    private javax.swing.JScrollPane sedScrollPane;
    private javax.swing.JButton selectButton;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
