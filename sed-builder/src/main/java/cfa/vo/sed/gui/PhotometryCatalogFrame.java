/**
 * Copyright (C) 2012 Smithsonian Astrophysical Observatory
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PhotometryCatalogFrame.java
 *
 * Created on Apr 5, 2012, 12:03:15 AM
 */
package cfa.vo.sed.gui;

import cfa.vo.iris.events.SedCommand;
import cfa.vo.iris.gui.ConfirmJInternalFrame;
import cfa.vo.iris.gui.NarrowOptionPane;
import cfa.vo.iris.sed.ExtSed;
import cfa.vo.sed.builder.ISegmentColumn;
import cfa.vo.sed.builder.SedBuilder;
import cfa.vo.sed.builder.SedImporterException;
import cfa.vo.sed.builder.dm.PhotometryCatalog;
import cfa.vo.sed.builder.dm.Target;
import cfa.vo.sed.builder.photfilters.FilterSelectionListener;
import cfa.vo.sed.builder.photfilters.PhotometryFilter;
import cfa.vo.sed.gui.PhotometryPointFrame.PhotometryFilterSelector;
import cfa.vo.sed.quantities.IUnit;
import cfa.vo.sed.quantities.SPVYQuantity;
import cfa.vo.sed.quantities.SPVYUnit;
import cfa.vo.sed.quantities.XQuantity;
import cfa.vo.sed.quantities.XUnit;
import cfa.vo.sed.setup.PhotometryCatalogBuilder;
import cfa.vo.sed.setup.PhotometryPointBuilder;
import cfa.vo.sedlib.Segment;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractButton;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import org.jdesktop.application.Action;
import org.jdesktop.beansbinding.Converter;
import uk.ac.starlink.table.StarTable;
import uk.ac.starlink.table.Tables;

/**
 *
 * @author olaurino
 */
public class PhotometryCatalogFrame extends ConfirmJInternalFrame implements SegmentFrame {
    
    /** Creates new form PhotometryCatalogFrame */
    public PhotometryCatalogFrame(final PhotometryCatalogBuilder conf) {
        super("Import Catalog to SED");

        this.conf = conf;
        initComponents();
        conf.getTargetBuilder().addPropertyChangeListener(new TableListener());

        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent lse) {
                if(!lse.getValueIsAdjusting()) {
                    int[] selected = jTable1.getSelectedRows();
                    conf.setSources(selected);
                }
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        buttonGroup1 = new javax.swing.ButtonGroup();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jComboBox4 = new javax.swing.JComboBox();
        jComboBox5 = new javax.swing.JComboBox();
        jButton3 = new javax.swing.JButton();
        jTextField11 = new javax.swing.JTextField();
        jRadioButton9 = new javax.swing.JRadioButton();
        jRadioButton8 = new javax.swing.JRadioButton();
        jRadioButton7 = new javax.swing.JRadioButton();
        jTextField10 = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        jComboBox6 = new javax.swing.JComboBox();
        jRadioButton1 = new javax.swing.JRadioButton();
        jTextField1 = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        jComboBox7 = new javax.swing.JComboBox();
        jComboBox8 = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jComboBox9 = new javax.swing.JComboBox();
        jComboBox10 = new javax.swing.JComboBox();
        jButton6 = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        nameChangeButton = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jTextField19 = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox();
        jComboBox1 = new javax.swing.JComboBox();
        jButton5 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Photometry Catalog Import");

        jSplitPane1.setBorder(null);
        jSplitPane1.setName("jSplitPane1"); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Photometry Points"));
        jPanel4.setName("jPanel4"); // NOI18N

        jSplitPane2.setBorder(null);
        jSplitPane2.setDividerLocation(60);
        jSplitPane2.setName("jSplitPane2"); // NOI18N

        jScrollPane2.setAutoscrolls(true);
        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setName("jList1"); // NOI18N
        jList1.setPreferredSize(new java.awt.Dimension(50, 85));
        jList1.setSize(new java.awt.Dimension(60, 136));

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${conf.pointBuilders}");
        org.jdesktop.swingbinding.JListBinding jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, jList1);
        bindingGroup.addBinding(jListBinding);
        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${selectedPoint}"), jList1, org.jdesktop.beansbinding.BeanProperty.create("selectedElement"));
        bindingGroup.addBinding(binding);

        jScrollPane2.setViewportView(jList1);

        jSplitPane2.setLeftComponent(jScrollPane2);

        jPanel3.setName("jPanel3"); // NOI18N

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("X Axis"));
        jPanel5.setName("jPanel5"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jList1, org.jdesktop.beansbinding.ELProperty.create("${selectedIndex > -1}"), jPanel5, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jComboBox4.setModel(new DefaultComboBoxModel(loadEnum(XQuantity.class)));
        jComboBox4.setName("jComboBox4"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${XQuantity}"), jComboBox4, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton7, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), jComboBox4, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jComboBox5.setName("jComboBox5"); // NOI18N

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${theXUnits}");
        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, jComboBox5);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${selectedPoint.spectralAxisBuilder.unit}"), jComboBox5, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        binding.setConverter(new XUnitsConverter());
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, jRadioButton7, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), jComboBox5, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance().getContext().getActionMap(PhotometryCatalogFrame.class, this);
        jButton3.setAction(actionMap.get("chooseFilter")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRadioButton9, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jButton3, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jTextField11.setEditable(false);
        jTextField11.setBorder(null);
        jTextField11.setDisabledTextColor(new java.awt.Color(67, 67, 67));
        jTextField11.setEnabled(false);
        jTextField11.setName("jTextField11"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${selectedPoint.spectralAxisBuilder.filter}"), jTextField11, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setConverter(new PhotometryFilterConverter());
        bindingGroup.addBinding(binding);

        buttonGroup1.add(jRadioButton9);
        jRadioButton9.setText("Photometry Filter");
        jRadioButton9.setName("jRadioButton9"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRadioButton7, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), jRadioButton9, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jRadioButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setType(evt);
            }
        });

        buttonGroup1.add(jRadioButton8);
        jRadioButton8.setText("Passband");
        jRadioButton8.setName("jRadioButton8"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRadioButton7, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), jRadioButton8, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jRadioButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setType(evt);
            }
        });

        buttonGroup1.add(jRadioButton7);
        jRadioButton7.setText("Single Value Column");
        jRadioButton7.setName("jRadioButton7"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${pointSelected}"), jRadioButton7, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jRadioButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setType(evt);
            }
        });

        jTextField10.setName("jTextField10"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${selectedPoint.spectralAxisBuilder.binmin}"), jTextField10, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setConverter(new StringToDoubleConverter());
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRadioButton8, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jTextField10, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jTextField12.setName("jTextField12"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${selectedPoint.spectralAxisBuilder.binmax}"), jTextField12, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setConverter(new StringToDoubleConverter());
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRadioButton8, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jTextField12, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jComboBox6.setName("jComboBox6"); // NOI18N

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${conf.columns}");
        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, jComboBox6);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${selectedPoint.spectralAxisBuilder.valueColumn}"), jComboBox6, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRadioButton7, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jComboBox6, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Single Value");
        jRadioButton1.setName("jRadioButton1"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${pointSelected}"), jRadioButton1, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setType(evt);
            }
        });

        jTextField1.setName("jTextField1"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${selectedPoint.spectralAxisBuilder.value}"), jTextField1, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setConverter(new StringToDoubleConverter());
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRadioButton1, org.jdesktop.beansbinding.ELProperty.create("${selected}"), jTextField1, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jComboBox4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 179, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jRadioButton7))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel5Layout.createSequentialGroup()
                                .add(69, 69, 69)
                                .add(jButton3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(1, 1, 1))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jComboBox6, 0, 161, Short.MAX_VALUE)
                            .add(jComboBox5, 0, 161, Short.MAX_VALUE)))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel5Layout.createSequentialGroup()
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jRadioButton9)
                            .add(jRadioButton8)
                            .add(jRadioButton1))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jTextField11, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel5Layout.createSequentialGroup()
                                .add(jTextField10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 93, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jTextField12, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE))
                            .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel5Layout.createSequentialGroup()
                                .add(9, 9, 9)
                                .add(jTextField1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jComboBox5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jComboBox4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(21, 21, 21)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jComboBox6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jRadioButton7))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jRadioButton1))
                .add(18, 18, 18)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextField10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jTextField12, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jRadioButton8))
                .add(19, 19, 19)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jTextField11, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jRadioButton9))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jButton3))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Y Axis"));
        jPanel7.setName("jPanel7"); // NOI18N

        jComboBox7.setModel(new DefaultComboBoxModel(loadEnum(SPVYQuantity.class)));
        jComboBox7.setName("jComboBox7"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${YQuantity}"), jComboBox7, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRadioButton7, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), jComboBox7, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jComboBox8.setName("jComboBox8"); // NOI18N

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${theYUnits}");
        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, jComboBox8);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${selectedPoint.fluxAxisBuilder.unit}"), jComboBox8, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        binding.setConverter(new YUnitsConverter());
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRadioButton7, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), jComboBox8, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jLabel6.setText("Value:");
        jLabel6.setName("jLabel6"); // NOI18N

        jLabel7.setText("Error:");
        jLabel7.setName("jLabel7"); // NOI18N

        jComboBox9.setName("jComboBox9"); // NOI18N

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${conf.columns}");
        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, jComboBox9);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${selectedPoint.fluxAxisBuilder.valueColumn}"), jComboBox9, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRadioButton7, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), jComboBox9, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jComboBox10.setName("jComboBox10"); // NOI18N

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${conf.columns}");
        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, jComboBox10);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${selectedPoint.fluxAxisBuilder.errorColumn}"), jComboBox10, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jRadioButton7, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), jComboBox10, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jButton6.setAction(actionMap.get("resetFlux")); // NOI18N
        jButton6.setName("jButton6"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel7Layout.createSequentialGroup()
                        .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel7Layout.createSequentialGroup()
                                .add(jComboBox7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 179, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jComboBox8, 0, 152, Short.MAX_VALUE))
                            .add(jPanel7Layout.createSequentialGroup()
                                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jLabel7)
                                    .add(jLabel6))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jComboBox10, 0, 290, Short.MAX_VALUE)
                                    .add(jComboBox9, 0, 290, Short.MAX_VALUE))))
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel7Layout.createSequentialGroup()
                        .add(jButton6)
                        .add(139, 139, 139))))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jComboBox7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jComboBox8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(jComboBox9, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(jComboBox10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton6)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel7, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 382, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .add(jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 175, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(29, 29, 29))
        );

        jSplitPane2.setRightComponent(jPanel3);

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setName("jToolBar1"); // NOI18N

        jButton1.setAction(actionMap.get("addPoint")); // NOI18N
        jButton1.setIcon(new ImageIcon(getClass().getResource("/list_add.png")));
        jButton1.setBorderPainted(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setName("jButton1"); // NOI18N
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton1);

        jButton2.setAction(actionMap.get("removePoint")); // NOI18N
        jButton2.setIcon(new ImageIcon(getClass().getResource("/list_remove.png")));
        jButton2.setBorderPainted(false);
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setName("jButton2"); // NOI18N
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(jButton2);

        nameChangeButton.setAction(actionMap.get("changePointName")); // NOI18N
        nameChangeButton.setFocusable(false);
        nameChangeButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nameChangeButton.setName("nameChangeButton"); // NOI18N
        nameChangeButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${pointSelected}"), nameChangeButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jToolBar1.add(nameChangeButton);

        jButton4.setAction(actionMap.get("importCatalog")); // NOI18N
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setName("jButton4"); // NOI18N
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${conf.validator.validation.valid}"), jButton4, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        jToolBar1.add(jButton4);

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jToolBar1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE)
            .add(jSplitPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 457, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jToolBar1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSplitPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jSplitPane1.setLeftComponent(jPanel1);

        jPanel2.setName("jPanel2"); // NOI18N

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "General"));
        jPanel6.setName("jPanel6"); // NOI18N

        jLabel5.setText("SED ID:");
        jLabel5.setName("jLabel5"); // NOI18N

        jTextField2.setEditable(false);
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField2.setName("sedId"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${conf.sed.id}"), jTextField2, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jLabel12.setText("File:");
        jLabel12.setName("jLabel12"); // NOI18N

        jTextField3.setEditable(false);
        jTextField3.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        jTextField3.setName("segmentFile"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${conf.filter.url.file}"), jTextField3, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel12)
                    .add(jLabel5))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jTextField3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                    .add(jTextField2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .add(8, 8, 8)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(jTextField2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel12)
                    .add(jTextField3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Catalog Metadata"));
        jPanel14.setName("jPanel14"); // NOI18N

        jLabel24.setText("Publisher:");
        jLabel24.setName("jLabel24"); // NOI18N

        jTextField19.setName("jTextField19"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${conf.targetBuilder.publisher}"), jTextField19, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        org.jdesktop.layout.GroupLayout jPanel14Layout = new org.jdesktop.layout.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel24)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTextField19, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel14Layout.createSequentialGroup()
                .add(jPanel14Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel24)
                    .add(jTextField19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(6, Short.MAX_VALUE))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Sources"));
        jPanel8.setName("jPanel8"); // NOI18N

        jLabel1.setText("Name Column:");
        jLabel1.setName("jLabel1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Ra", "Dec"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setColumnSelectionAllowed(true);
        jTable1.setName("jTable1"); // NOI18N
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        jLabel2.setText("Ra Column:");
        jLabel2.setName("jLabel2"); // NOI18N

        jComboBox2.setName("jComboBox2"); // NOI18N

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${conf.columns}");
        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, jComboBox2);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${conf.targetBuilder.raColumn}"), jComboBox2, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        jLabel3.setText("Dec Column:");
        jLabel3.setName("jLabel3"); // NOI18N

        jComboBox3.setName("jComboBox3"); // NOI18N

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${conf.columns}");
        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, jComboBox3);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${conf.targetBuilder.decColumn}"), jComboBox3, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        jComboBox1.setName("jComboBox1"); // NOI18N

        eLProperty = org.jdesktop.beansbinding.ELProperty.create("${conf.columns}");
        jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, jComboBox1);
        bindingGroup.addBinding(jComboBoxBinding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${conf.targetBuilder.nameColumn}"), jComboBox1, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        jButton5.setAction(actionMap.get("resetName")); // NOI18N
        jButton5.setName("jButton5"); // NOI18N

        org.jdesktop.layout.GroupLayout jPanel8Layout = new org.jdesktop.layout.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel8Layout.createSequentialGroup()
                        .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                            .add(jPanel8Layout.createSequentialGroup()
                                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(jLabel3)
                                    .add(jLabel2)
                                    .add(jLabel1))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jComboBox2, 0, 213, Short.MAX_VALUE)
                                    .add(jComboBox3, 0, 213, Short.MAX_VALUE)
                                    .add(jComboBox1, 0, 213, Short.MAX_VALUE))))
                        .addContainerGap())
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel8Layout.createSequentialGroup()
                        .add(jButton5)
                        .add(130, 130, 130))))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel8Layout.createSequentialGroup()
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jComboBox2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel8Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jComboBox3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                .add(9, 9, 9)
                .add(jButton5))
        );

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel14, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jPanel8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 118, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 62, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel2);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Help"));
        jPanel9.setName("jPanel9"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setName("jTextArea1"); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, this, org.jdesktop.beansbinding.ELProperty.create("${conf.validator.validation.string}"), jTextArea1, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        jScrollPane3.setViewportView(jTextArea1);

        org.jdesktop.layout.GroupLayout jPanel9Layout = new org.jdesktop.layout.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 829, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jSplitPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jSplitPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 496, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setType(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setType
        selectedPoint.getSpectralAxisBuilder().setMode(evt.getActionCommand());
        if (evt.getActionCommand().equals("Photometry Filter")) {
            jComboBox4.setEnabled(false);
            jComboBox5.setEnabled(false);
        } else {
            jComboBox4.setEnabled(true);
            jComboBox5.setEnabled(true);
        }
    }//GEN-LAST:event_setType
    private StarTable table;

    private void updateTable() throws Exception {
        if (table == null) {
            table = conf.getTemplateTable();
        }

        List<Target> targets = new ArrayList();

        ISegmentColumn targetNameColumn = conf.getTargetBuilder().getNameColumn();
        ISegmentColumn targetRaColumn = conf.getTargetBuilder().getRaColumn();
        ISegmentColumn targetDecColumn = conf.getTargetBuilder().getDecColumn();
        
        if(!table.isRandom())
            table = Tables.randomTable(table);

        for (int k = 0; k < table.getRowCount(); k++) {
            Target t = new Target();
            t.setName(table.getCell(k, targetNameColumn.getNumber()).toString());
            if (targetRaColumn != null && Number.class.isAssignableFrom(targetRaColumn.getContentClass())) {
                t.setRa(((Number) table.getCell(k, targetRaColumn.getNumber())).doubleValue());
            } else {
                t.setRa(Double.NaN);
            }
            if (targetDecColumn != null && Number.class.isAssignableFrom(targetDecColumn.getContentClass())) {
                t.setDec(((Number) table.getCell(k, targetDecColumn.getNumber())).doubleValue());
            } else {
                t.setDec(Double.NaN);
            }
            targets.add(t);
        }

        jTable1.setModel(new TargetsModel(targets));
//        jTable1.updateUI();
    }

    @Override
    public void update(Segment segment) {
        
    }

    private class TargetsModel extends AbstractTableModel {

        private List<Target> targets;

        public TargetsModel(List<Target> targets) {
            this.targets = targets;
        }

        @Override
        public int getRowCount() {
            return targets.size();
        }

        @Override
        public int getColumnCount() {
            return 3;
        }

        @Override
        public Object getValueAt(int i, int j) {
            Target t = targets.get(i);
            switch (j) {
                case 0:
                    return t.getName();
                case 1:
                    return t.getRa();
                case 2:
                    return t.getDec();
                default:
                    return null;

            }
        }

        @Override
        public String getColumnName(int i) {
            switch (i) {
                case 0:
                    return "Name";
                case 1:
                    return "Ra";
                case 2:
                    return "Dec";
                default:
                    return null;

            }
        }
    }
    
    private PhotometryCatalogBuilder conf;
    public static final String PROP_CONF = "conf";

    /**
     * Get the value of conf
     *
     * @return the value of conf
     */
    public PhotometryCatalogBuilder getConf() {
        return conf;
    }

    /**
     * Set the value of conf
     *
     * @param conf new value of conf
     */
    public void setConf(PhotometryCatalogBuilder conf) {
        PhotometryCatalogBuilder oldConf = this.conf;
        this.conf = conf;
        firePropertyChange(PROP_CONF, oldConf, conf);
    }
    private int i = 0;
    private PhotometryPointBuilder selectedPoint;
    public static final String PROP_SELECTEDPOINT = "selectedPoint";

    /**
     * Get the value of selectedPoint
     *
     * @return the value of selectedPoint
     */
    public PhotometryPointBuilder getSelectedPoint() {
        return selectedPoint;
    }

    /**
     * Set the value of selectedPoint
     *
     * @param selectedPoint new value of selectedPoint
     */
    public void setSelectedPoint(PhotometryPointBuilder selectedPoint) {
        PhotometryPointBuilder oldSelectedPoint = this.selectedPoint;
        this.selectedPoint = selectedPoint;
        firePropertyChange(PROP_SELECTEDPOINT, oldSelectedPoint, selectedPoint);
        if (selectedPoint != null) {

            XQuantity xquantity = selectedPoint.getSpectralAxisBuilder().getQuantity();
            IUnit unit = selectedPoint.getSpectralAxisBuilder().getUnit();

            if (xquantity != null) {
                for (int k = 0; k < jComboBox4.getItemCount(); k++) {
                    String q = (String) jComboBox4.getItemAt(k);
                    String qset = xquantity.getName();
                    if (q.equalsIgnoreCase(qset)) {
                        jComboBox4.setSelectedIndex(k);
                    }
                }

                for (int k = 0; k < jComboBox4.getItemCount(); k++) {
                    String u = (String) jComboBox4.getItemAt(k);
                    String uset = unit.getString();
                    if (u != null && u.equalsIgnoreCase(uset)) {
                        jComboBox4.setSelectedIndex(k);
                    }
                }

            } else {
                jComboBox4.setSelectedIndex(-1);
            }

            SPVYQuantity quantity = selectedPoint.getFluxAxisBuilder().getQuantity();
            unit = selectedPoint.getFluxAxisBuilder().getUnit();

            if (quantity != null) {
                for (int k = 0; k < jComboBox7.getItemCount(); k++) {
                    String q = (String) jComboBox7.getItemAt(k);
                    String qset = quantity.getName();
                    if (q.equalsIgnoreCase(qset)) {
                        jComboBox7.setSelectedIndex(k);
                    }
                }

                for (int k = 0; k < jComboBox8.getItemCount(); k++) {
                    String u = (String) jComboBox8.getItemAt(k);
                    String uset = unit.getString();
                    if (u != null && u.equalsIgnoreCase(uset)) {
                        jComboBox8.setSelectedIndex(k);
                    }
                }

            } else {
                jComboBox7.setSelectedIndex(-1);
            }



            if (selectedPoint.getSpectralAxisBuilder().getMode() != null) {
                String mode = selectedPoint.getSpectralAxisBuilder().getMode();
                Enumeration<AbstractButton> elements = buttonGroup1.getElements();
                while (elements.hasMoreElements()) {
                    AbstractButton b = elements.nextElement();
                    if (b.getActionCommand().equals(mode)) {
                        b.setSelected(true);
                        b.updateUI();
                    }
                }
            } else {
                buttonGroup1.clearSelection();
            }

        }
        
        

        setPointSelected(selectedPoint != null);
    }
    private boolean pointSelected;
    public static final String PROP_POINTSELECTED = "pointSelected";

    /**
     * Get the value of pointSelected
     *
     * @return the value of pointSelected
     */
    public boolean isPointSelected() {
        return pointSelected;
    }

    /**
     * Set the value of pointSelected
     *
     * @param pointSelected new value of pointSelected
     */
    public void setPointSelected(boolean pointSelected) {
        boolean oldPointSelected = this.pointSelected;
        this.pointSelected = pointSelected;
        firePropertyChange(PROP_POINTSELECTED, oldPointSelected, pointSelected);
    }

    @Action
    public void addPoint() {
        String id = "Point" + (i++);
        PhotometryPointBuilder ppc;
        List<PhotometryPointBuilder> builders = conf.getPointBuilders();
        
        ppc = new PhotometryPointBuilder(id);

            
        if(!builders.isEmpty()) {
            PhotometryPointBuilder pb = builders.get(builders.size()-1);
            ppc.getFluxAxisBuilder().setQuantity(pb.getFluxAxisBuilder().getQuantity());
            ppc.getFluxAxisBuilder().setUnit(pb.getFluxAxisBuilder().getUnit());
            ppc.getSpectralAxisBuilder().setMode(pb.getSpectralAxisBuilder().getMode());
            ppc.getSpectralAxisBuilder().setQuantity(pb.getSpectralAxisBuilder().getQuantity());
            ppc.getSpectralAxisBuilder().setUnit(pb.getSpectralAxisBuilder().getUnit());
            ppc.getFluxAxisBuilder().setValueColumn(pb.getFluxAxisBuilder().getValueColumn());
            ppc.getSpectralAxisBuilder().setValueColumn(pb.getSpectralAxisBuilder().getValueColumn());
        }
        conf.addPointBuilder(ppc);
        jList1.setSelectedValue(ppc, true);
    }

    private String xQuantity;
    public static final String PROP_XQUANTITY = "xQuantity";

    /**
     * Get the value of xAxisQuantity
     *
     * @return the value of xAxisQuantity
     */
    public String getXQuantity() {
        return xQuantity;
    }

    /**
     * Set the value of xAxisQuantity
     *
     * @param xAxisQuantity new value of xAxisQuantity
     */
    public void setXQuantity(String xQuantity) {
        String oldXQuantity = this.xQuantity;
        this.xQuantity = xQuantity;
        firePropertyChange(PROP_XQUANTITY, oldXQuantity, xQuantity);
        if (xQuantity != null) {
            List strings = new ArrayList();
            XQuantity q = XQuantity.valueOf(xQuantity.toUpperCase());
            for (IUnit unit : q.getPossibleUnits()) {
                strings.add(unit.getString());
            }
            setTheXUnits(strings);
            selectedPoint.getSpectralAxisBuilder().setQuantity(q);
        }
    }
    private String yQuantity;
    public static final String PROP_YQUANTITY = "yQuantity";

    /**
     * Get the value of yQuantity
     *
     * @return the value of yQuantity
     */
    public String getYQuantity() {
        return yQuantity;
    }

    /**
     * Set the value of yQuantity
     *
     * @param yQuantity new value of yQuantity
     */
    public void setYQuantity(String yQuantity) {
        String oldYQuantity = this.yQuantity;
        this.yQuantity = yQuantity;
        firePropertyChange(PROP_YQUANTITY, oldYQuantity, yQuantity);
        if (yQuantity != null) {
            List strings = new ArrayList();
            SPVYQuantity q = SPVYQuantity.valueOf(yQuantity.toUpperCase());
            for (IUnit unit : q.getPossibleUnits()) {
                strings.add(unit.getString());
            }
            setTheYUnits(strings);
            selectedPoint.getFluxAxisBuilder().setQuantity(q);
        } else {
            setTheYUnits(new ArrayList());
        }
    }
    private List<String> theXUnits;
    public static final String PROP_THEXUNITS = "theXUnits";

    /**
     * Get the value of theXUnits
     *
     * @return the value of theXUnits
     */
    public List<String> getTheXUnits() {
        return theXUnits;
    }

    /**
     * Set the value of theXUnits
     *
     * @param theXUnits new value of theXUnits
     */
    public void setTheXUnits(List<String> theXUnits) {
        List<String> oldTheXUnits = this.theXUnits;
        this.theXUnits = theXUnits;
        firePropertyChange(PROP_THEXUNITS, oldTheXUnits, theXUnits);
    }
    private List<String> theYUnits;
    public static final String PROP_THEYUNITS = "theYUnits";

    /**
     * Get the value of theYUnits
     *
     * @return the value of theYUnits
     */
    public List<String> getTheYUnits() {
        return theYUnits;
    }

    /**
     * Set the value of theYUnits
     *
     * @param theYUnits new value of theYUnits
     */
    public void setTheYUnits(List<String> theYUnits) {
        List<String> oldTheYUnits = this.theYUnits;
        this.theYUnits = theYUnits;
        firePropertyChange(PROP_THEYUNITS, oldTheYUnits, theYUnits);
    }

    private String[] loadEnum(Class<? extends Enum> clazz) {
        try {
            Enum[] l;
            l = (Enum[]) clazz.getMethod("values").invoke(null);
            String[] s = new String[l.length];
            for (int i = 0; i < l.length; i++) {
                s[i] = l[i].name();
            }
            return s;
        } catch (Exception ex) {
            Logger.getLogger(SetupFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    private class TableListener implements PropertyChangeListener {
        @Override
        public void propertyChange(PropertyChangeEvent pce) {
            try {
                updateTable();
            } catch (Exception ex) {
                Logger.getLogger(PhotometryCatalogFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private abstract class UnitsConverter extends Converter {

        @Override
        public Object convertForward(Object s) {
            IUnit u = (IUnit) s;
            return u.getString();
        }

        @Override
        public Object convertReverse(Object t) {
            try {
                return getUnitsFromString((String) t);
            } catch (SedImporterException ex) {
                Logger.getLogger(PhotometryPointFrame.class.getName()).log(Level.SEVERE, null, ex);
                return null;
            }
        }

        protected abstract IUnit getUnitsFromString(String s) throws SedImporterException;
    }

    private class XUnitsConverter extends UnitsConverter {

        @Override
        protected IUnit getUnitsFromString(String s) throws SedImporterException {
            return XUnit.getFromUnitString(s);
        }
    }

    private class YUnitsConverter extends UnitsConverter {

        @Override
        protected IUnit getUnitsFromString(String s) throws SedImporterException {
            return SPVYUnit.getFromUnitString(s);
        }
    }

    private class StringToDoubleConverter extends Converter {

        @Override
        public Object convertReverse(Object s) {
            try {
                return Double.valueOf((String) s);
            } catch (Exception ex) {
                return Double.NaN;
            }

        }

        @Override
        public Object convertForward(Object t) {
            return ((Double) t).toString();
        }
    }

    private class PhotometryFilterConverter extends Converter {

        @Override
        public Object convertForward(Object s) {
            return ((PhotometryFilter) s).getId();
        }

        @Override
        public Object convertReverse(Object t) {
            for(PhotometryPointBuilder b : conf.getPointBuilders()) {
                if(b.getId().equals(t))
                    return b;
            }

            return null;
        }
    }

//    private class PhotometryFilterSelector extends JInternalFrame implements FilterSelectionListener {
//
//        private PhotometryFilterBrowsePanel browser = new PhotometryFilterBrowsePanel(false);
//
//        public PhotometryFilterSelector() throws Exception {
//            super("Photometry Filter Selector");
//
//            JButton button = new JButton("Close");
//            button.addActionListener(new ActionListener() {
//
//                @Override
//                public void actionPerformed(ActionEvent ae) {
//                    close();
//                }
//            });
//            button.setVisible(true);
//
//            this.setLayout(new BorderLayout());
//
//            this.add(browser, BorderLayout.NORTH);
//            this.add(button, BorderLayout.SOUTH);
//
//            this.setDefaultCloseOperation(JInternalFrame.HIDE_ON_CLOSE);
//            this.setClosable(true);
//            this.setIconifiable(true);
//            this.setMaximizable(true);
//
//            this.pack();
//        }
//
//        private void close() {
//            browser.removeFilterSelectionListener(this);
//            this.setVisible(false);
//        }
//
//        @Override
//        public void show() {
//            browser.addFilterSelectionListener(this);
//            super.show();
//        }
//
//        @Override
//        public void process(PhotometryFilter source, SedCommand payload) {
//            selectedPoint.getSpectralAxisBuilder().setFilter(source);
//        }
//    }
    
    private PhotometryFilterSelector selector;

    private FilterSelectionListener listener = new FilterSelectionListener() {

        @Override
        public void process(final PhotometryFilter source, SedCommand payload) {
            selectedPoint.getSpectralAxisBuilder().setFilter(source);
        }
    };
    
    @Action
    public void chooseFilter() throws Exception {
        if (selector == null) {
            selector = new PhotometryFilterSelector(listener, false);
            SedBuilder.getWorkspace().addFrame(selector);
        }

        selector.show();
    }

    @Action
    public void removePoint() {
        conf.removePointBuilder(selectedPoint);
        buttonGroup1.clearSelection();
    }
    private List<Segment> generated;

    @Action
    public void importCatalog() {
        ExtSed sed = conf.getSed();

        if (generated != null) {
            for (Segment segment : generated) {
                sed.remove(segment);
            }
        }

        try {
            PhotometryCatalog catalog = conf.build();
            List<Segment> segments = catalog.addTo(sed);
            for (Segment s : segments) {
                Map<Segment, SegmentFrame> attach = (Map<Segment, SegmentFrame>) sed.getAttachment("builder:configuration");
                if (attach == null) {
                    attach = new HashMap();
                    sed.addAttachment("builder:configuration", attach);
                }
                attach.put(s, this);
            }
            setVisible(false);
            SedBuilder.update();
        } catch (Exception ex) {
            NarrowOptionPane.showMessageDialog(SedBuilder.getWorkspace().getRootFrame(), "Error adding the segment: " + ex.getMessage(), "Error", NarrowOptionPane.ERROR_MESSAGE);
            Logger.getLogger(PhotometryCatalogFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    @Action
    public void changePointName() {
        String resp = NarrowOptionPane.showInputDialog(SedBuilder.getWorkspace().getRootFrame(), "Change Photometry Point Name");
        boolean change = true;
        for(PhotometryPointBuilder b : conf.getPointBuilders()) {
            if(resp.equals(b.getId())) {
                change = false;
                break;
            }
        }

        if(change)
            selectedPoint.setId(resp);
        else
            NarrowOptionPane.showMessageDialog(SedBuilder.getWorkspace().getRootFrame(), "A Point with this name already exists", "Error", NarrowOptionPane.ERROR_MESSAGE);
    }

    @Action
    public void resetName() {
        conf.getTargetBuilder().setNameColumn(null);
        conf.getTargetBuilder().setRaColumn(null);
        conf.getTargetBuilder().setDecColumn(null);
        jTable1.setModel(new TargetsModel(new ArrayList()));
    }
    
    @Action
    public void resetFlux() {
        selectedPoint.getFluxAxisBuilder().setValueColumn(null);
        selectedPoint.getFluxAxisBuilder().setErrorColumn(null);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox10;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JComboBox jComboBox3;
    private javax.swing.JComboBox jComboBox4;
    private javax.swing.JComboBox jComboBox5;
    private javax.swing.JComboBox jComboBox6;
    private javax.swing.JComboBox jComboBox7;
    private javax.swing.JComboBox jComboBox8;
    private javax.swing.JComboBox jComboBox9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JList jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton7;
    private javax.swing.JRadioButton jRadioButton8;
    private javax.swing.JRadioButton jRadioButton9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField19;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton nameChangeButton;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
